{"ast":null,"code":"import { transformsArrayToProps } from '../../lib/extract/extractTransform';\nexport function parseTransformProp(transform, props) {\n  const transformArray = [];\n  props && transformArray.push(...stringifyTransformProps(props));\n  if (Array.isArray(transform)) {\n    if (typeof transform[0] === 'number') {\n      transformArray.push(`matrix(${transform.join(' ')})`);\n    } else {\n      const stringifiedProps = transformsArrayToProps(transform);\n      transformArray.push(...stringifyTransformProps(stringifiedProps));\n    }\n  } else if (typeof transform === 'string') {\n    transformArray.push(transform);\n  }\n  return transformArray.length ? transformArray.join(' ') : undefined;\n}\nexport function stringifyTransformProps(transformProps) {\n  const transformArray = [];\n  if (transformProps.translate != null) {\n    transformArray.push(`translate(${transformProps.translate})`);\n  }\n  if (transformProps.translateX != null || transformProps.translateY != null) {\n    transformArray.push(`translate(${transformProps.translateX || 0}, ${transformProps.translateY || 0})`);\n  }\n  if (transformProps.scale != null) {\n    transformArray.push(`scale(${transformProps.scale})`);\n  }\n  if (transformProps.scaleX != null || transformProps.scaleY != null) {\n    transformArray.push(`scale(${transformProps.scaleX || 1}, ${transformProps.scaleY || 1})`);\n  }\n  if (transformProps.rotation != null) {\n    transformArray.push(`rotate(${transformProps.rotation})`);\n  }\n  if (transformProps.skewX != null) {\n    transformArray.push(`skewX(${transformProps.skewX})`);\n  }\n  if (transformProps.skewY != null) {\n    transformArray.push(`skewY(${transformProps.skewY})`);\n  }\n  return transformArray;\n}","map":{"version":3,"names":["transformsArrayToProps","parseTransformProp","transform","props","transformArray","push","stringifyTransformProps","Array","isArray","join","stringifiedProps","length","undefined","transformProps","translate","translateX","translateY","scale","scaleX","scaleY","rotation","skewX","skewY"],"sources":["C:\\Users\\Tyler\\Downloads\\PrecisionTracker-v4-wired\\PrecisionTracker\\mobile\\node_modules\\react-native-svg\\src\\web\\utils\\parseTransform.ts"],"sourcesContent":["import type { TransformProps } from '../../lib/extract/types';\nimport {\n  transformsArrayToProps,\n  TransformsStyleArray,\n} from '../../lib/extract/extractTransform';\nimport type { BaseProps } from '../types';\n\nexport function parseTransformProp(\n  transform: TransformProps['transform'],\n  props?: BaseProps\n) {\n  const transformArray: string[] = [];\n\n  props && transformArray.push(...stringifyTransformProps(props));\n\n  if (Array.isArray(transform)) {\n    if (typeof transform[0] === 'number') {\n      transformArray.push(`matrix(${transform.join(' ')})`);\n    } else {\n      const stringifiedProps = transformsArrayToProps(\n        // @ts-expect-error FIXME\n        transform as TransformsStyleArray\n      );\n      transformArray.push(...stringifyTransformProps(stringifiedProps));\n    }\n  } else if (typeof transform === 'string') {\n    transformArray.push(transform);\n  }\n\n  return transformArray.length ? transformArray.join(' ') : undefined;\n}\n\nexport function stringifyTransformProps(transformProps: TransformProps) {\n  const transformArray = [];\n  if (transformProps.translate != null) {\n    transformArray.push(`translate(${transformProps.translate})`);\n  }\n  if (transformProps.translateX != null || transformProps.translateY != null) {\n    transformArray.push(\n      `translate(${transformProps.translateX || 0}, ${\n        transformProps.translateY || 0\n      })`\n    );\n  }\n  if (transformProps.scale != null) {\n    transformArray.push(`scale(${transformProps.scale})`);\n  }\n  if (transformProps.scaleX != null || transformProps.scaleY != null) {\n    transformArray.push(\n      `scale(${transformProps.scaleX || 1}, ${transformProps.scaleY || 1})`\n    );\n  }\n  // rotation maps to rotate, not to collide with the text rotate attribute (which acts per glyph rather than block)\n  if (transformProps.rotation != null) {\n    transformArray.push(`rotate(${transformProps.rotation})`);\n  }\n  if (transformProps.skewX != null) {\n    transformArray.push(`skewX(${transformProps.skewX})`);\n  }\n  if (transformProps.skewY != null) {\n    transformArray.push(`skewY(${transformProps.skewY})`);\n  }\n  return transformArray;\n}\n"],"mappings":"AACA,SACEA,sBAAsB,QAEjB,oCAAoC;AAG3C,OAAO,SAASC,kBAAkBA,CAChCC,SAAsC,EACtCC,KAAiB,EACjB;EACA,MAAMC,cAAwB,GAAG,EAAE;EAEnCD,KAAK,IAAIC,cAAc,CAACC,IAAI,CAAC,GAAGC,uBAAuB,CAACH,KAAK,CAAC,CAAC;EAE/D,IAAII,KAAK,CAACC,OAAO,CAACN,SAAS,CAAC,EAAE;IAC5B,IAAI,OAAOA,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACpCE,cAAc,CAACC,IAAI,CAAC,UAAUH,SAAS,CAACO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;IACvD,CAAC,MAAM;MACL,MAAMC,gBAAgB,GAAGV,sBAAsB,CAE7CE,SACF,CAAC;MACDE,cAAc,CAACC,IAAI,CAAC,GAAGC,uBAAuB,CAACI,gBAAgB,CAAC,CAAC;IACnE;EACF,CAAC,MAAM,IAAI,OAAOR,SAAS,KAAK,QAAQ,EAAE;IACxCE,cAAc,CAACC,IAAI,CAACH,SAAS,CAAC;EAChC;EAEA,OAAOE,cAAc,CAACO,MAAM,GAAGP,cAAc,CAACK,IAAI,CAAC,GAAG,CAAC,GAAGG,SAAS;AACrE;AAEA,OAAO,SAASN,uBAAuBA,CAACO,cAA8B,EAAE;EACtE,MAAMT,cAAc,GAAG,EAAE;EACzB,IAAIS,cAAc,CAACC,SAAS,IAAI,IAAI,EAAE;IACpCV,cAAc,CAACC,IAAI,CAAC,aAAaQ,cAAc,CAACC,SAAS,GAAG,CAAC;EAC/D;EACA,IAAID,cAAc,CAACE,UAAU,IAAI,IAAI,IAAIF,cAAc,CAACG,UAAU,IAAI,IAAI,EAAE;IAC1EZ,cAAc,CAACC,IAAI,CACjB,aAAaQ,cAAc,CAACE,UAAU,IAAI,CAAC,KACzCF,cAAc,CAACG,UAAU,IAAI,CAAC,GAElC,CAAC;EACH;EACA,IAAIH,cAAc,CAACI,KAAK,IAAI,IAAI,EAAE;IAChCb,cAAc,CAACC,IAAI,CAAC,SAASQ,cAAc,CAACI,KAAK,GAAG,CAAC;EACvD;EACA,IAAIJ,cAAc,CAACK,MAAM,IAAI,IAAI,IAAIL,cAAc,CAACM,MAAM,IAAI,IAAI,EAAE;IAClEf,cAAc,CAACC,IAAI,CACjB,SAASQ,cAAc,CAACK,MAAM,IAAI,CAAC,KAAKL,cAAc,CAACM,MAAM,IAAI,CAAC,GACpE,CAAC;EACH;EAEA,IAAIN,cAAc,CAACO,QAAQ,IAAI,IAAI,EAAE;IACnChB,cAAc,CAACC,IAAI,CAAC,UAAUQ,cAAc,CAACO,QAAQ,GAAG,CAAC;EAC3D;EACA,IAAIP,cAAc,CAACQ,KAAK,IAAI,IAAI,EAAE;IAChCjB,cAAc,CAACC,IAAI,CAAC,SAASQ,cAAc,CAACQ,KAAK,GAAG,CAAC;EACvD;EACA,IAAIR,cAAc,CAACS,KAAK,IAAI,IAAI,EAAE;IAChClB,cAAc,CAACC,IAAI,CAAC,SAASQ,cAAc,CAACS,KAAK,GAAG,CAAC;EACvD;EACA,OAAOlB,cAAc;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}