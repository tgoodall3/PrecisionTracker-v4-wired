{"ast":null,"code":"import { UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentPrint from './ExponentPrint';\nlet isPrinting = false;\nexport const Orientation = ExponentPrint.Orientation;\nexport async function printAsync(options) {\n  if (Platform.OS === 'web') {\n    return await ExponentPrint.print(options);\n  }\n  if (!options.uri && !options.html && Platform.OS === 'ios' && !options.markupFormatterIOS) {\n    throw new Error('Must provide either `html` or `uri` to print');\n  }\n  if (options.uri && options.html) {\n    throw new Error('Must provide exactly one of `html` and `uri` but both were specified');\n  }\n  if (options.markupFormatterIOS !== undefined) {\n    console.warn('The markupFormatterIOS option is deprecated. Use useMarkupFormatter instead.');\n  }\n  if (isPrinting) {\n    throw new Error('Another print request is already in progress');\n  }\n  isPrinting = true;\n  try {\n    return await ExponentPrint.print(options);\n  } finally {\n    isPrinting = false;\n  }\n}\nexport async function selectPrinterAsync() {\n  if (ExponentPrint.selectPrinter) {\n    return await ExponentPrint.selectPrinter();\n  }\n  throw new UnavailabilityError('Print', 'selectPrinterAsync');\n}\nexport async function printToFileAsync(options = {}) {\n  return await ExponentPrint.printToFileAsync(options);\n}","map":{"version":3,"names":["UnavailabilityError","Platform","ExponentPrint","isPrinting","Orientation","printAsync","options","OS","print","uri","html","markupFormatterIOS","Error","undefined","console","warn","selectPrinterAsync","selectPrinter","printToFileAsync"],"sources":["C:\\Users\\Tyler\\Downloads\\PrecisionTracker-v4-wired\\PrecisionTracker\\mobile\\node_modules\\expo-print\\src\\Print.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExponentPrint from './ExponentPrint';\nimport {\n  FilePrintOptions,\n  FilePrintResult,\n  OrientationType,\n  PrintOptions,\n  Printer,\n} from './Print.types';\n\nexport { FilePrintOptions, FilePrintResult, OrientationType, PrintOptions, Printer };\n\nlet isPrinting = false;\n// @needsAudit @docsMissing\n/**\n * The orientation of the printed content.\n */\nexport const Orientation: OrientationType = ExponentPrint.Orientation;\n\n// @needsAudit\n/**\n * Prints a document or HTML, on web this prints the HTML from the page.\n * > Note: On iOS, printing from HTML source doesn't support local asset URLs (due to `WKWebView`\n * > limitations). As a workaround you can use inlined base64-encoded strings.\n * > See [this comment](https://github.com/expo/expo/issues/7940#issuecomment-657111033) for more details.\n *\n * > Note: on iOS, when printing without providing a `PrintOptions.printerUrl` the `Promise` will be\n * > resolved once printing is started in the native print window and rejected if the window is closed without\n * > starting the print. On Android the `Promise` will be resolved immediately after displaying the native print window\n * > and won't be rejected if the window is closed without starting the print.\n * @param options A map defining what should be printed.\n * @return Resolves to an empty `Promise` if printing started.\n */\nexport async function printAsync(options: PrintOptions): Promise<void> {\n  if (Platform.OS === 'web') {\n    return await ExponentPrint.print(options);\n  }\n  if (!options.uri && !options.html && Platform.OS === 'ios' && !options.markupFormatterIOS) {\n    throw new Error('Must provide either `html` or `uri` to print');\n  }\n  if (options.uri && options.html) {\n    throw new Error('Must provide exactly one of `html` and `uri` but both were specified');\n  }\n  if (options.markupFormatterIOS !== undefined) {\n    console.warn('The markupFormatterIOS option is deprecated. Use useMarkupFormatter instead.');\n  }\n  if (isPrinting) {\n    throw new Error('Another print request is already in progress');\n  }\n\n  isPrinting = true;\n  try {\n    return await ExponentPrint.print(options);\n  } finally {\n    isPrinting = false;\n  }\n}\n\n// @needsAudit\n/**\n * Chooses a printer that can be later used in `printAsync`\n * @return A promise which fulfils with an object containing `name` and `url` of the selected printer.\n * @platform ios\n */\nexport async function selectPrinterAsync(): Promise<Printer> {\n  if (ExponentPrint.selectPrinter) {\n    return await ExponentPrint.selectPrinter();\n  }\n\n  throw new UnavailabilityError('Print', 'selectPrinterAsync');\n}\n\n// @needsAudit\n/**\n * Prints HTML to PDF file and saves it to [app's cache directory](./filesystem/#filesystemcachedirectory).\n * On Web this method opens the print dialog.\n * @param options A map of print options.\n */\nexport async function printToFileAsync(options: FilePrintOptions = {}): Promise<FilePrintResult> {\n  return await ExponentPrint.printToFileAsync(options);\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAAC,OAAAC,QAAA;AAGxD,OAAOC,aAAa,MAAM,iBAAiB;AAW3C,IAAIC,UAAU,GAAG,KAAK;AAKtB,OAAO,MAAMC,WAAW,GAAoBF,aAAa,CAACE,WAAW;AAgBrE,OAAO,eAAeC,UAAUA,CAACC,OAAqB;EACpD,IAAIL,QAAQ,CAACM,EAAE,KAAK,KAAK,EAAE;IACzB,OAAO,MAAML,aAAa,CAACM,KAAK,CAACF,OAAO,CAAC;;EAE3C,IAAI,CAACA,OAAO,CAACG,GAAG,IAAI,CAACH,OAAO,CAACI,IAAI,IAAIT,QAAQ,CAACM,EAAE,KAAK,KAAK,IAAI,CAACD,OAAO,CAACK,kBAAkB,EAAE;IACzF,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;;EAEjE,IAAIN,OAAO,CAACG,GAAG,IAAIH,OAAO,CAACI,IAAI,EAAE;IAC/B,MAAM,IAAIE,KAAK,CAAC,sEAAsE,CAAC;;EAEzF,IAAIN,OAAO,CAACK,kBAAkB,KAAKE,SAAS,EAAE;IAC5CC,OAAO,CAACC,IAAI,CAAC,8EAA8E,CAAC;;EAE9F,IAAIZ,UAAU,EAAE;IACd,MAAM,IAAIS,KAAK,CAAC,8CAA8C,CAAC;;EAGjET,UAAU,GAAG,IAAI;EACjB,IAAI;IACF,OAAO,MAAMD,aAAa,CAACM,KAAK,CAACF,OAAO,CAAC;GAC1C,SAAS;IACRH,UAAU,GAAG,KAAK;;AAEtB;AAQA,OAAO,eAAea,kBAAkBA,CAAA;EACtC,IAAId,aAAa,CAACe,aAAa,EAAE;IAC/B,OAAO,MAAMf,aAAa,CAACe,aAAa,EAAE;;EAG5C,MAAM,IAAIjB,mBAAmB,CAAC,OAAO,EAAE,oBAAoB,CAAC;AAC9D;AAQA,OAAO,eAAekB,gBAAgBA,CAACZ,OAAA,GAA4B,EAAE;EACnE,OAAO,MAAMJ,aAAa,CAACgB,gBAAgB,CAACZ,OAAO,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}