{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"onError\", \"useSuspense\"];\nvar _jsxFileName = \"C:\\\\Users\\\\Tyler\\\\Downloads\\\\PrecisionTracker-v4-wired\\\\PrecisionTracker\\\\mobile\\\\node_modules\\\\expo-sqlite\\\\build\\\\hooks.js\";\nimport { Asset } from 'expo-asset';\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport ExpoSQLite from './ExpoSQLiteNext';\nimport { openDatabaseAsync } from './SQLiteDatabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SQLiteContext = createContext(null);\nexport function SQLiteProvider(_ref) {\n  let {\n      children,\n      onError,\n      useSuspense = false\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  if (onError != null && useSuspense) {\n    throw new Error('Cannot use `onError` with `useSuspense`, use error boundaries instead.');\n  }\n  if (useSuspense) {\n    return _jsxDEV(SQLiteProviderSuspense, Object.assign({}, props, {\n      children: children\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n  return _jsxDEV(SQLiteProviderNonSuspense, Object.assign({}, props, {\n    onError: onError,\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 13\n  }, this);\n}\nexport function useSQLiteContext() {\n  const context = useContext(SQLiteContext);\n  if (context == null) {\n    throw new Error('useSQLiteContext must be used within a <SQLiteProvider>');\n  }\n  return context;\n}\nlet databaseInstance = null;\nfunction SQLiteProviderSuspense({\n  databaseName,\n  options,\n  assetSource,\n  children,\n  onInit\n}) {\n  const databasePromise = getDatabaseAsync({\n    databaseName,\n    options,\n    assetSource,\n    onInit\n  });\n  const database = use(databasePromise);\n  return _jsxDEV(SQLiteContext.Provider, {\n    value: database,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n}\nfunction SQLiteProviderNonSuspense({\n  databaseName,\n  options,\n  assetSource,\n  children,\n  onInit,\n  onError\n}) {\n  const databaseRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function setup() {\n      try {\n        const db = await openDatabaseWithInitAsync({\n          databaseName,\n          options,\n          assetSource,\n          onInit\n        });\n        databaseRef.current = db;\n        setLoading(false);\n      } catch (e) {\n        setError(e);\n      }\n    }\n    async function teardown(db) {\n      try {\n        await db?.closeAsync();\n      } catch (e) {\n        setError(e);\n      }\n    }\n    setup();\n    return () => {\n      const db = databaseRef.current;\n      teardown(db);\n      databaseRef.current = null;\n      setLoading(true);\n    };\n  }, [databaseName, options, onInit]);\n  if (error != null) {\n    const handler = onError ?? (e => {\n      throw e;\n    });\n    handler(error);\n  }\n  if (loading || !databaseRef.current) {\n    return null;\n  }\n  return _jsxDEV(SQLiteContext.Provider, {\n    value: databaseRef.current,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 12\n  }, this);\n}\nfunction getDatabaseAsync({\n  databaseName,\n  options,\n  assetSource,\n  onInit\n}) {\n  if (databaseInstance?.promise != null && databaseInstance?.databaseName === databaseName && databaseInstance?.options === options && databaseInstance?.onInit === onInit) {\n    return databaseInstance.promise;\n  }\n  let promise;\n  if (databaseInstance?.promise != null) {\n    promise = databaseInstance.promise.then(db => {\n      db.closeAsync();\n    }).then(() => {\n      return openDatabaseWithInitAsync({\n        databaseName,\n        options,\n        assetSource,\n        onInit\n      });\n    });\n  } else {\n    promise = openDatabaseWithInitAsync({\n      databaseName,\n      options,\n      assetSource,\n      onInit\n    });\n  }\n  databaseInstance = {\n    databaseName,\n    options,\n    onInit,\n    promise\n  };\n  return promise;\n}\nasync function openDatabaseWithInitAsync({\n  databaseName,\n  options,\n  assetSource,\n  onInit\n}) {\n  if (assetSource != null) {\n    await importDatabaseFromAssetAsync(databaseName, assetSource);\n  }\n  const database = await openDatabaseAsync(databaseName, options);\n  if (onInit != null) {\n    await onInit(database);\n  }\n  return database;\n}\nexport async function importDatabaseFromAssetAsync(databaseName, assetSource) {\n  const asset = await Asset.fromModule(assetSource.assetId).downloadAsync();\n  if (!asset.localUri) {\n    throw new Error(`Unable to get the localUri from asset ${assetSource.assetId}`);\n  }\n  await ExpoSQLite.importAssetDatabaseAsync(databaseName, asset.localUri, assetSource.forceOverwrite ?? false);\n}\nfunction use(promise) {\n  if (isReactUsePromise(promise)) {\n    if (promise.status === 'fulfilled') {\n      if (promise.value === undefined) {\n        throw new Error('[use] Unexpected undefined value from promise');\n      }\n      return promise.value;\n    } else if (promise.status === 'rejected') {\n      throw promise.reason;\n    } else if (promise.status === 'pending') {\n      throw promise;\n    }\n    throw new Error('[use] Promise is in an invalid state');\n  }\n  const suspensePromise = promise;\n  suspensePromise.status = 'pending';\n  suspensePromise.then(result => {\n    suspensePromise.status = 'fulfilled';\n    suspensePromise.value = result;\n  }, reason => {\n    suspensePromise.status = 'rejected';\n    suspensePromise.reason = reason;\n  });\n  throw suspensePromise;\n}\nfunction isReactUsePromise(promise) {\n  return typeof promise === 'object' && promise !== null && 'status' in promise;\n}","map":{"version":3,"names":["Asset","React","createContext","useContext","useEffect","useRef","useState","ExpoSQLite","openDatabaseAsync","jsxDEV","_jsxDEV","SQLiteContext","SQLiteProvider","_ref","children","onError","useSuspense","props","_objectWithoutPropertiesLoose","_excluded","Error","SQLiteProviderSuspense","Object","assign","fileName","_jsxFileName","lineNumber","columnNumber","SQLiteProviderNonSuspense","useSQLiteContext","context","databaseInstance","databaseName","options","assetSource","onInit","databasePromise","getDatabaseAsync","database","use","Provider","value","databaseRef","loading","setLoading","error","setError","setup","db","openDatabaseWithInitAsync","current","e","teardown","closeAsync","handler","promise","then","importDatabaseFromAssetAsync","asset","fromModule","assetId","downloadAsync","localUri","importAssetDatabaseAsync","forceOverwrite","isReactUsePromise","status","undefined","reason","suspensePromise","result"],"sources":["C:\\Users\\Tyler\\Downloads\\PrecisionTracker-v4-wired\\PrecisionTracker\\mobile\\node_modules\\expo-sqlite\\src\\hooks.tsx"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n\nimport ExpoSQLite from './ExpoSQLiteNext';\nimport type { SQLiteOpenOptions } from './NativeDatabase';\nimport { openDatabaseAsync, type SQLiteDatabase } from './SQLiteDatabase';\n\nexport interface SQLiteProviderAssetSource {\n  /**\n   * The asset ID returned from the `require()` call.\n   */\n  assetId: number;\n\n  /**\n   * Force overwrite the local database file even if it already exists.\n   * @default false\n   */\n  forceOverwrite?: boolean;\n}\n\nexport interface SQLiteProviderProps {\n  /**\n   * The name of the database file to open.\n   */\n  databaseName: string;\n\n  /**\n   * Open options.\n   */\n  options?: SQLiteOpenOptions;\n\n  /**\n   * Import a bundled database file from the specified asset module.\n   * @example\n   * ```ts\n   * assetSource={{ assetId: require('./assets/db.db') }}\n   * ```\n   */\n  assetSource?: SQLiteProviderAssetSource;\n\n  /**\n   * The children to render.\n   */\n  children: React.ReactNode;\n\n  /**\n   * A custom initialization handler to run before rendering the children.\n   * You can use this to run database migrations or other setup tasks.\n   */\n  onInit?: (db: SQLiteDatabase) => Promise<void>;\n\n  /**\n   * Handle errors from SQLiteProvider.\n   * @default rethrow the error\n   */\n  onError?: (error: Error) => void;\n\n  /**\n   * Enable [`React.Suspense`](https://react.dev/reference/react/Suspense) integration.\n   * @default false\n   * @example\n   * ```tsx\n   * export default function App() {\n   *   return (\n   *     <Suspense fallback={<Text>Loading...</Text>}>\n   *       <SQLiteProvider databaseName=\"test.db\" useSuspense={true}>\n   *         <Main />\n   *       </SQLiteProvider>\n   *     </Suspense>\n   *   );\n   * }\n   * ```\n   */\n  useSuspense?: boolean;\n}\n\n/**\n * Create a context for the SQLite database\n */\nconst SQLiteContext = createContext<SQLiteDatabase | null>(null);\n\n/**\n * Context.Provider component that provides a SQLite database to all children.\n * All descendants of this component will be able to access the database using the [`useSQLiteContext`](#usesqlitecontext) hook.\n */\nexport function SQLiteProvider({\n  children,\n  onError,\n  useSuspense = false,\n  ...props\n}: SQLiteProviderProps) {\n  if (onError != null && useSuspense) {\n    throw new Error('Cannot use `onError` with `useSuspense`, use error boundaries instead.');\n  }\n\n  if (useSuspense) {\n    return <SQLiteProviderSuspense {...props}>{children}</SQLiteProviderSuspense>;\n  }\n\n  return (\n    <SQLiteProviderNonSuspense {...props} onError={onError}>\n      {children}\n    </SQLiteProviderNonSuspense>\n  );\n}\n\n/**\n * A global hook for accessing the SQLite database across components.\n * This hook should only be used within a [`<SQLiteProvider>`](#sqliteprovider) component.\n *\n * @example\n * ```tsx\n * export default function App() {\n *   return (\n *     <SQLiteProvider databaseName=\"test.db\">\n *       <Main />\n *     </SQLiteProvider>\n *   );\n * }\n *\n * export function Main() {\n *   const db = useSQLiteContext();\n *   console.log('sqlite version', db.getSync('SELECT sqlite_version()'));\n *   return <View />\n * }\n * ```\n */\nexport function useSQLiteContext(): SQLiteDatabase {\n  const context = useContext(SQLiteContext);\n  if (context == null) {\n    throw new Error('useSQLiteContext must be used within a <SQLiteProvider>');\n  }\n  return context;\n}\n\n//#region Internals\n\ntype DatabaseInstanceType = Pick<SQLiteProviderProps, 'databaseName' | 'options' | 'onInit'> & {\n  promise: Promise<SQLiteDatabase> | null;\n};\n\nlet databaseInstance: DatabaseInstanceType | null = null;\n\nfunction SQLiteProviderSuspense({\n  databaseName,\n  options,\n  assetSource,\n  children,\n  onInit,\n}: Omit<SQLiteProviderProps, 'onError' | 'useSuspense'>) {\n  const databasePromise = getDatabaseAsync({\n    databaseName,\n    options,\n    assetSource,\n    onInit,\n  });\n  const database = use(databasePromise);\n  return <SQLiteContext.Provider value={database}>{children}</SQLiteContext.Provider>;\n}\n\nfunction SQLiteProviderNonSuspense({\n  databaseName,\n  options,\n  assetSource,\n  children,\n  onInit,\n  onError,\n}: Omit<SQLiteProviderProps, 'useSuspense'>) {\n  const databaseRef = useRef<SQLiteDatabase | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    async function setup() {\n      try {\n        const db = await openDatabaseWithInitAsync({ databaseName, options, assetSource, onInit });\n        databaseRef.current = db;\n        setLoading(false);\n      } catch (e) {\n        setError(e);\n      }\n    }\n\n    async function teardown(db: SQLiteDatabase | null) {\n      try {\n        await db?.closeAsync();\n      } catch (e) {\n        setError(e);\n      }\n    }\n\n    setup();\n\n    return () => {\n      const db = databaseRef.current;\n      teardown(db);\n      databaseRef.current = null;\n      setLoading(true);\n    };\n  }, [databaseName, options, onInit]);\n\n  if (error != null) {\n    const handler =\n      onError ??\n      ((e) => {\n        throw e;\n      });\n    handler(error);\n  }\n  if (loading || !databaseRef.current) {\n    return null;\n  }\n  return <SQLiteContext.Provider value={databaseRef.current}>{children}</SQLiteContext.Provider>;\n}\n\nfunction getDatabaseAsync({\n  databaseName,\n  options,\n  assetSource,\n  onInit,\n}: Pick<\n  SQLiteProviderProps,\n  'databaseName' | 'options' | 'assetSource' | 'onInit'\n>): Promise<SQLiteDatabase> {\n  if (\n    databaseInstance?.promise != null &&\n    databaseInstance?.databaseName === databaseName &&\n    databaseInstance?.options === options &&\n    databaseInstance?.onInit === onInit\n  ) {\n    return databaseInstance.promise;\n  }\n\n  let promise: Promise<SQLiteDatabase>;\n  if (databaseInstance?.promise != null) {\n    promise = databaseInstance.promise\n      .then((db) => {\n        db.closeAsync();\n      })\n      .then(() => {\n        return openDatabaseWithInitAsync({ databaseName, options, assetSource, onInit });\n      });\n  } else {\n    promise = openDatabaseWithInitAsync({ databaseName, options, assetSource, onInit });\n  }\n  databaseInstance = {\n    databaseName,\n    options,\n    onInit,\n    promise,\n  };\n  return promise;\n}\n\nasync function openDatabaseWithInitAsync({\n  databaseName,\n  options,\n  assetSource,\n  onInit,\n}: Pick<\n  SQLiteProviderProps,\n  'databaseName' | 'options' | 'assetSource' | 'onInit'\n>): Promise<SQLiteDatabase> {\n  if (assetSource != null) {\n    await importDatabaseFromAssetAsync(databaseName, assetSource);\n  }\n  const database = await openDatabaseAsync(databaseName, options);\n  if (onInit != null) {\n    await onInit(database);\n  }\n  return database;\n}\n\n/**\n * Imports an asset database into the SQLite database directory.\n *\n * Exposed only for testing purposes.\n * @hidden\n */\nexport async function importDatabaseFromAssetAsync(\n  databaseName: string,\n  assetSource: SQLiteProviderAssetSource\n) {\n  const asset = await Asset.fromModule(assetSource.assetId).downloadAsync();\n  if (!asset.localUri) {\n    throw new Error(`Unable to get the localUri from asset ${assetSource.assetId}`);\n  }\n  await ExpoSQLite.importAssetDatabaseAsync(\n    databaseName,\n    asset.localUri,\n    assetSource.forceOverwrite ?? false\n  );\n}\n\n//#endregion\n\n//#region Private Suspense API similar to `React.use`\n\n// Referenced from https://github.com/vercel/swr/blob/1d8110900d1aee3747199bfb377b149b7ff6848e/_internal/src/types.ts#L27-L31\ntype ReactUsePromise<T, E extends Error = Error> = Promise<T> & {\n  status?: 'pending' | 'fulfilled' | 'rejected';\n  value?: T;\n  reason?: E;\n};\n\n// Referenced from https://github.com/reactjs/react.dev/blob/6570e6cd79a16ac3b1a2902632eddab7e6abb9ad/src/content/reference/react/Suspense.md\n/**\n * A custom hook like [`React.use`](https://react.dev/reference/react/use) hook using private Suspense implementation.\n */\nfunction use<T>(promise: Promise<T> | ReactUsePromise<T>) {\n  if (isReactUsePromise(promise)) {\n    if (promise.status === 'fulfilled') {\n      if (promise.value === undefined) {\n        throw new Error('[use] Unexpected undefined value from promise');\n      }\n      return promise.value;\n    } else if (promise.status === 'rejected') {\n      throw promise.reason;\n    } else if (promise.status === 'pending') {\n      throw promise;\n    }\n    throw new Error('[use] Promise is in an invalid state');\n  }\n\n  const suspensePromise = promise as ReactUsePromise<T>;\n  suspensePromise.status = 'pending';\n  suspensePromise.then(\n    (result: T) => {\n      suspensePromise.status = 'fulfilled';\n      suspensePromise.value = result;\n    },\n    (reason) => {\n      suspensePromise.status = 'rejected';\n      suspensePromise.reason = reason;\n    }\n  );\n  throw suspensePromise;\n}\n\nfunction isReactUsePromise<T>(\n  promise: Promise<T> | ReactUsePromise<T>\n): promise is ReactUsePromise<T> {\n  return typeof promise === 'object' && promise !== null && 'status' in promise;\n}\n\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}